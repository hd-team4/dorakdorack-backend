<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dorakdorak.domain.member.mapper.MemberMapper">

  <insert id="insertMember"
    parameterType="dorakdorak.domain.member.dto.MemberSignupDto">
    <selectKey keyProperty="id" resultType="long" order="BEFORE">
      SELECT SEQ_MEMBER.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO MEMBER (ID, UNIVERSITY_ID, EMAIL, PASSWORD, ROLE, NAME, GENDER, BIRTHDATE,
    ZERO_WASTE_COUNT, ZIPCODE, DOROMYUNG_ADDRESS,
    JIBUN_ADDRESS, DETAIL_ADDRESS, CREATED_AT, CREATED_BY )
    VALUES (#{id}, #{universityId}, #{email}, #{password}, #{role}, #{name}, #{gender},
    #{birthdate},
    #{zeroWasteCount}, #{zipCode}, #{doromyungAddress},
    #{jibunAddress}, #{detailAddress}, SYSTIMESTAMP, 0)
  </insert>

  <insert id="insertAllergyCategoryMap">
    INSERT INTO ALLERGY_CATEGORY_MAP (ID, MEMBER_ID, ALLERGY_CATEGORY_ID, CREATED_AT, CREATED_BY)
    VALUES (SEQ_ALLERGY_CATEGORY_MAP.NEXTVAL, #{memberId}, #{allergyCategoryId}, SYSTIMESTAMP,
    #{memberId})
  </insert>

  <select id="existByEmail" parameterType="String" resultType="Boolean">
    SELECT CASE
    WHEN COUNT(*) > 0 THEN 1
    ELSE 0
    END
    FROM MEMBER
    WHERE EMAIL = #{email}
  </select>

  <select id="findByEmailIntoAuth"
    parameterType="String"
    resultType="dorakdorak.domain.auth.dto.response.MemberAuthDto">
    SELECT
    id,
    university_id,
    email,
    password,
    role
    FROM member
    WHERE email = #{email}
  </select>

  <!-- 회원 리프레시 토큰 업데이트 (업데이트 시간 포함) -->
  <update id="updateMemberRefreshToken">
    UPDATE member
    SET refresh_token = #{refreshToken},
    updated_at = SYSTIMESTAMP
    WHERE email = #{email}
  </update>


  <select id="findMemberByMemberEmail" parameterType="String" resultType="int">
    SELECT COUNT(*)
    FROM MEMBER
    WHERE EMAIL = #{email}
  </select>

  <select id="findMemberSummaryByMemberId"
    resultType="dorakdorak.domain.member.dto.response.MemberSummaryResponseDto">
    SELECT
    NAME,
    EMAIL
    FROM MEMBER
    WHERE ID = #{memberId}
  </select>

  <select id="findAllergyCategoryNameByMemberId" parameterType="long" resultType="string">
    SELECT ac.name
    FROM ALLERGY_CATEGORY_MAP acm
    JOIN ALLERGY_CATEGORY ac ON acm.ALLERGY_CATEGORY_ID = ac.ID
    WHERE acm.MEMBER_ID = #{memberId}
  </select>

  <update id="incrementZeroWasteCount">
    UPDATE MEMBER
    SET ZERO_WASTE_COUNT = ZERO_WASTE_COUNT + 1,
    UPDATED_AT = SYSTIMESTAMP
    WHERE ID = #{memberId}
  </update>
</mapper>
